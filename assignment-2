-->Create a named volume:

1)Create a Docker volume named "devops" using the docker volume create command.
  docker volume create devops

2)Verify that the volume is created.
  docker volume ls

3)Attach a volume to a container Create a new container and attach the "devops" volume using the -v
  docker run -v devops:/path/to/mount <image_name>

4)Start the container and execute commands inside it to create, modify, or delete files within the volume.
  docker start <container_name>
  docker exec -it <container_name/id> /bin/bash
  touch /path/to/mount/myfile.txt
  echo "Some content" > /path/to/mount/myfile.txt
  cat /path/to/mount/myfile.txt
  rm /path/to/mount/myfile.txt

5)Stop and remove the container, ensuring that the volume is preserved.
  docker stop <container_name/id>
  docker rm <container_name/id>
  docker volume ls

-->Mount a host directory as a volume:

1)Create a directory on your host machine.
  $ mkdir docker
  $ pwd
    /Users/deepthi/data/test

2)Start a new container and mount the host directory as a volume using the -v
  $ docker run -it -v /Users/deepthi/data/test:/data nginx /bin/bash 

3)Verify that the container can access and modify files within the mounted volume.
  $ cd /test
  $ touch hello1
  then it should create same file in container(/data) as well
  
4)Stop and remove the container, ensuring that the host directory remains intact.
  exit from the container
  $ docker stop d1d8b57a4231
  $ docker remove d1d8b57a4231
  
  check /Users/deepthi/data/test -> it will still have hello1 file

-->Backup and restore a volume:

1)Create a container and attach a volume to it.
2)Populate the volume with some data or files.
3)Remove the container and recreate it, or use a new container with the same volume.
4)Restore the volume's contents from the backup.
